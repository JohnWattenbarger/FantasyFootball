{
    "collab_server" : "",
    "contents" : "library('rvest')\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(xlsx)\n\n# Take an HTML_Table from ESPN player stats, get the data, \ngetHtmlTable <- function(columns, url)\n{\n  webpage <- read_html(url)\n  values <- html_table(webpage)\n  table <- data.frame(matrix(unlist(values), ncol=columns, byrow=F))\n  colnames(table) <- lapply(table[1, ], as.character)\n  table <- unique(table)\n  table <- table[-1,]\n  \n  return(table)\n}\n\n# makes the 1st column display the year\naddYear <- function(table, year)\n{\n  table[,1] <- year\n  colnames(table)[1] <- \"Year\"\n  return(table)\n}\n\n# Creates and combines tables from the last 10 years\nmultiYearTable <- function(type)\n{\n  for(i in 1:10)\n  {\n    year <- 2007+i\n    tempTable <- makeTable(type, year)\n    tempTable <- addYear(tempTable, year)\n    if (i == 1)\n      tableCombined <- tempTable\n    else\n      tableCombined <- rbind(tableCombined, tempTable)\n  }\n  return(tableCombined)\n}\n\n# remove commas from data\n  # also makes the data type character\nremoveCommas <- function(data)\n{\n  data <- gsub(\",\", \"\", data)\n  return(data)\n}\n\n# convert data type from factor to character\ntoCharacter <- function(data)\n{\n  data <- sapply(data, as.character)\n  return(data)\n}\n\n# convert data type from character to numeric\ntoNumeric <- function(data)\n{\n  data <- sapply(data, as.numeric)\n  return(data)\n}\n\n# gets the data to the correct format\ncleanUp <- function(table, type)\n{\n  if (type == \"passing\")\n  {\n    table[,7] <- removeCommas(table[,7])\n    table[,c(4:6, 8:14)] <- toCharacter(table[,c(4:6, 8:14)])\n    table[,c(4:14)] <- toNumeric(table[,c(4:14)])\n    return(table)\n  }\n  if (type == \"rushing\")\n  {\n    table[,5] <- removeCommas(table[,5])\n    table[,c(4:12)] <- toCharacter(table[,c(4:12)])\n    table[,c(4:12)] <- toNumeric(table[,c(4:12)])\n    return(table)\n  }\n  if (type == \"receiving\")\n  {\n    table[,6] <- removeCommas(table[,6])\n    table[,c(4:14)] <- toCharacter(table[,c(4:14)])\n    table[,c(4:14)] <- toNumeric(table[,c(4:14)])\n    return(table)\n  }\n  # Note: this will be difficult. Must split columns 8 - 12 into 2 columns each\n  if (type == \"kicking\")\n  {\n    table[,c(2:23)] <- toCharacter(table[,c(2:23)])\n    table <- splitAttemptsAndMakes(table)\n    table <- table[,c(1:9, 11, 13, 15, 17, 19:33)]\n    table[, c(5:18)] <- toNumeric(table[, c(5:18)])\n    colnames(table)[c(7, 8, 10:14, 17, 18)] <- c(\"Pct_FG\", \"Blk_FG\", \"Pct_1_19\", \"Pct_20_29\", \"Pct_30_39\", \"Pct_40_49\", \"Pct_50_or_more\", \"Pct_XP\", \"Blk_XP\")\n    table <- table[,c(1:4, 6, 5, 7:9, 16, 15, 17:18, 19:20, 10, 21:22, 11, 23:24, 12, 25:26, 13, 27:28, 14)]\n    return(table)\n  }\n}\n\n# Create a table using ESPN.com or NFL.com\nmakeTable <- function(type, year)\n{\n  if(type == \"kicking\")\n    return(makeTableNfl(type, year))\n  else\n    return(makeTableEspn(type, year))\n}\n\n# Create a table (cycling through all pages for the given year and type)\nmakeTableEspn <- function(type, year)\n{\n  year <- lapply(year, as.character)\n  \n  numberOfLinks <- getNumberOfLinks(type)\n  numberOfColumns <- getNumberOfColumns(type)\n  \n  urlPart1 <- 'http://www.espn.com/nfl/statistics/player/_/stat/'\n  urlPart2 <- '/year/'\n  urlPart3 <- '/seasontype/2'\n  urlPart4 <- '/qualified/false/count/'\n  \n  totalUrl <- paste(urlPart1, type, urlPart2, year, urlPart3, sep=\"\")\n  \n  for(i in 1:(numberOfLinks))\n  {\n    tempTable <- getHtmlTable(numberOfColumns, paste(totalUrl, urlPart4, lapply((40*(i-1) + 1), as.character), sep=\"\"))\n    if (i==1)\n      totalTable <- tempTable\n    else\n      totalTable <- rbind(totalTable, tempTable)\n  }\n  \n  return(totalTable)\n}\n\n\nmakeTableNfl <- function(type, year)\n{\n  year <- lapply(year, as.character)\n  \n  numberOfLinks <- getNumberOfLinks(type)\n  numberOfColumns <- getNumberOfColumns(type)\n  \n  # http://www.nfl.com/stats/categorystats?archive=true&conference=null&statisticCategory=FIELD_GOALS&season=2015&seasonType=REG&experience=&tabSeq=0&qualified=true&Submit=Go\n  urlPart1 <- \"http://www.nfl.com/stats/categorystats?archive=true&conference=null&statisticCategory=FIELD_GOALS&season=\"\n  urlPart2 <- \"&seasonType=REG&experience=&tabSeq=0&qualified=true&Submit=Go\"\n  \n  totalUrl <- paste(urlPart1, year, urlPart2, sep=\"\")\n  \n  table <- getHtmlTable(numberOfColumns, totalUrl)\n  return(table)\n}\n\ngetNumberOfLinks <- function(type)\n{\n  if(type == \"passing\")\n    return(3)\n  if(type == \"rushing\")\n    return(8)\n  if(type == \"receiving\")\n    return(11)\n  if(type == \"kicking\")\n    return(1)\n}\n\ngetNumberOfColumns <- function(type)\n{\n  if(type == \"passing\")\n    return(14)\n  if(type == \"rushing\")\n    return(12)\n  if(type == \"receiving\")\n    return(14)\n  if(type == \"kicking\")\n    return(23)\n}\n\n# Separate the PLAYER column into 2 columns (PLAYER and position)\ncreatePositionColumn <- function(table, numberOfColumns)\n{\n  # Split the 2nd column wherever \", \" is found\n  nameAndPositionTable <- str_split_fixed(table[,2], \", \", 2)\n  table$Position <- toCharacter(nameAndPositionTable[,2])\n  table[,2] <- toCharacter(nameAndPositionTable[,1])\n  table <- table[c(1:2, numberOfColumns+1, 3:numberOfColumns)]\n  return(table)\n}\n\n# Separate the makes and attempts columns for kicking stats\nsplitAttemptsAndMakes <- function(table)\n{\n  attemptsAndMakes <- str_split_fixed(table[,10], \"-\", 2)\n  table$Att_1_19 <- toNumeric(toCharacter(attemptsAndMakes[,1]))\n  table$Made_1_19 <- toNumeric(toCharacter(attemptsAndMakes[,2]))\n  \n  attemptsAndMakes <- str_split_fixed(table[,12], \"-\", 2)\n  table$Att_20_29 <- toNumeric(toCharacter(attemptsAndMakes[,1]))\n  table$Made_20_29 <- toNumeric(toCharacter(attemptsAndMakes[,2]))\n  \n  attemptsAndMakes <- str_split_fixed(table[,14], \"-\", 2)\n  table$Att_30_39 <- toNumeric(toCharacter(attemptsAndMakes[,1]))\n  table$Made_30_39 <- toNumeric(toCharacter(attemptsAndMakes[,2]))\n  \n  attemptsAndMakes <- str_split_fixed(table[,16], \"-\", 2)\n  table$Att_40_49 <- toNumeric(toCharacter(attemptsAndMakes[,1]))\n  table$Made_40_49 <- toNumeric(toCharacter(attemptsAndMakes[,2]))\n  \n  attemptsAndMakes <- str_split_fixed(table[,18], \"-\", 2)\n  table$Att_50_or_more <- toNumeric(toCharacter(attemptsAndMakes[,1]))\n  table$Made_50_or_more <- toNumeric(toCharacter(attemptsAndMakes[,2]))\n  \n  return(table)\n}\n\n# Rename duplicate rows after creating position tables\nrenameDuplicates <- function(table, type)\n{\n  if(type == \"QB\")\n    colnames(table)[c(6, 8:11, 15:19, 20, 21:22, 24)] <- c(\"P_Att\", \"P_Yds\", \"P_Yds_Avg\", \"P_Long\", \"P_TDs\", \"P_Yds_G\", \"R_Att\", \"R_Yds\", \"Yds_Avg\", \"R_Long\", \"20\", \"R_Tds\", \"R_Yds_G\", \"First_Dn\")\n  if(type == \"RB\")\n    colnames(table)[c(6:13, 16:22, 24)] <- c(\"Ru_Yds\", \"Ru_Avg\", \"Ru_Long\", \"Ru_20\", \"Ru_TDs\", \"Ru_Yds_G\", \"Ru_Fum\", \"Ru_1DN\", \"Re_Yds\", \"Re_Avg\", \"Re_TDs\", \"Re_Long\", \"Re_20\", \"Re_Yds_G\", \"Re_Fum\", \"Re_1Dn\")\n  \n  return(table)\n}\n\n# get only the top 32 players at a position\ngetTopPlayers <- function(table)\n{\n  for(i in (1:10))\n  {\n    year <- 2007+i\n    temp <- table[table$Year %in% year,]\n    temp <- temp[with(temp, order(-temp$`Fantasy_Points`)),]\n    temp <- temp[1:32,]\n    if(i == 1)\n      topPlayers <- temp\n    else\n      topPlayers <- rbind(topPlayers, temp)\n  }\n  \n  return(topPlayers)\n}\n\n# get a position for a certain year\noneYearTable <- function(table, year)\n{\n  oneYear <- table[table$Year %in% year,]\n  return(oneYear)\n}\n\n\n###############################################\n################ Create Tables ################\n###############################################\n\n# create a table with 10 years of passing stats\npassing <- multiYearTable(\"passing\")\npassing <- cleanUp(passing, \"passing\")\nView(passing)\n\n# create a table with 10 years of rushing stats\nrushing <- multiYearTable(\"rushing\")\nrushing <- cleanUp(rushing, \"rushing\")\nView(rushing)\n\n# create a table with 10 years of receiving stats\nreceiving <- multiYearTable(\"receiving\")\nreceiving <- cleanUp(receiving, \"receiving\")\nView(receiving)\n\n# create a table with 10 years of kicking stats\nkicking <- multiYearTable(\"kicking\")\nkicking <- cleanUp(kicking, \"kicking\")\nView(kicking)\n\n# change PLAYER column into 2 columns (name and position)\npassing <- createPositionColumn(passing, 14)\nrushing <- createPositionColumn(rushing, 12)\nreceiving <- createPositionColumn(receiving, 14)\n\n# Create Position Tables\nQB <- merge(x=passing, y=rushing, by.x = c(\"Year\", \"PLAYER\", \"Position\", \"TEAM\"), by.y = c(\"Year\", \"PLAYER\", \"Position\", \"TEAM\"))\nQB <- QB[QB$Position %in% \"QB\",]\n\nRB <- merge(x=rushing, y=receiving, by.x = c(\"Year\", \"PLAYER\", \"Position\", \"TEAM\"), by.y = c(\"Year\", \"PLAYER\", \"Position\", \"TEAM\"))\nRB <- RB[RB$Position %in% \"RB\",]\n\nWR <- receiving[receiving$Position %in% \"WR\",]\n\nTE <- receiving[receiving$Position %in% \"TE\",]\n\n# Rename duplicate rows\nQB <- renameDuplicates(QB, \"QB\")\nRB <- renameDuplicates(RB, \"RB\")\nWR <- renameDuplicates(WR, \"WR\")\nTE <- renameDuplicates(TE, \"TE\")\n\n# add a fantasy point total column\n\nQB$'Fantasy_Points' <- .04*QB$`P Yds` + 4*QB$`P TDs` - 2*QB$INT + .1*QB$`R Yds` + 6*QB$`R Tds`- 2*QB$FUM\n\nRB$'Fantasy_Points' <- .1*RB$`Ru Yds` + 6*RB$`Ru TDs` - 2*RB$`Ru Fum` + .1*RB$`Re Yds` + 6*RB$`Re TDs` - 2*RB$`Re Fum`\n\nWR$'Fantasy_Points' <- .1*WR$YDS + 6*WR$TD - 2*WR$FUM\n\nTE$'Fantasy_Points' <- .1*TE$YDS + 6*TE$TD - 2*TE$FUM\n\nkicking$'Fantasy_Points' <- 1*kicking$XPM - 1*(kicking$`FG Att`-kicking$FGM) +\n  3*(kicking$Made_1_19+kicking$Made_20_29+kicking$Made_30_39) + 4*(kicking$Made_40_49) + \n  5*(kicking$Att_50_or_more)\n\n###############################################\n############### Top 32 Players ################\n###############################################\n\nQB32 <- getTopPlayers(QB)\nRB32 <- getTopPlayers(RB)\nWR32 <- getTopPlayers(WR)\nTE32 <- getTopPlayers(TE)\nK32 <- getTopPlayers(kicking)\n\n########## means ##########\n\nmeanQB32 <- aggregate(QB32[, 5:25], list(Year = QB32$Year), mean)\nmeanQB32$Position <- \"QB\"\n\nmeanRB32 <- aggregate(RB32[, 5:25], list(Year = RB32$Year), mean)\nmeanRB32$Position <- \"RB\"\n\nmeanWR32 <- aggregate(WR32[, 5:16], list(Year = WR32$Year), mean)\nmeanWR32$Position <- \"WR\"\n\nmeanTE32 <- aggregate(TE32[, 5:16], list(Year = TE32$Year), mean)\nmeanTE32$Position <- \"TE\"\n\nmeanFP <- meanQB32[c(\"Year\", \"Fantasy_Points\", \"Position\")]\nmeanFP <- rbind(meanFP, meanRB32[c(\"Year\", \"Fantasy_Points\", \"Position\")])\nmeanFP <- rbind(meanFP, meanWR32[c(\"Year\", \"Fantasy_Points\", \"Position\")])\nmeanFP <- rbind(meanFP, meanTE32[c(\"Year\", \"Fantasy_Points\", \"Position\")])\n\n\n###############################################\n################ Plots I used #################\n###############################################\n\n# create colors\nplotBackgroundColor <- rgb(200/255, 200/255, 200/255, 1)\nstripColor <- rgb(210/255, 225/255, 245/255, 1)\npanelBackgroundColor <- \"black\"\n\n# plot mean change over time\nplotMean <- ggplot(meanFP, aes(Year, `Fantasy_Points`, group=Position)) +\n  geom_line(aes(col=meanFP$Position), size=1.5) +\n  geom_point(aes(col=meanFP$Position), size=3) +\n  scale_x_continuous(\"Year\", labels = as.character(meanFP$Year), breaks = meanFP$Year) +\n  guides(color=guide_legend(title=\"Position\")) +\n  ggtitle(\"Average Fantasy Points of the Top 32 Players\") +\n  theme(plot.title = element_text(size=30, hjust = 0.5)) +\n  scale_color_discrete(breaks=c(\"QB\",\"RB\",\"WR\", \"TE\")) +\n  scale_y_continuous(name = \"Fantasy Points\")\n\n# QB\n# make a plot using the QB data table, x-axis = 'P Yds', y-axis = 'Fantasy_Points'\nplotQB <- ggplot(QB, aes(`P_Yds`, `Fantasy_Points`)) +\n  # color based on 'P TDS'\n  geom_point(aes(col=QB$`P_TDs`)) +\n  # change the color of points (blue = low, red = high)\n  scale_color_gradientn(colors=c(\"blue\", \"light blue\", \"green\", \"gold\", \"orange\", \"red\")) +\n  # change legend title\n  guides(color=guide_legend(title=\"Passing TDs\")) +\n  # split into separate graphs by Year\n  facet_wrap(~Year) +\n  ggtitle(\"QB Passing Yards vs Fantasy Points\") +\n  # center title, then change colors\n  theme(plot.title = element_text(size=30, hjust = 0.5), \n        panel.background = element_rect(fill = panelBackgroundColor, colour = 'white'), \n        plot.background = element_rect(fill=plotBackgroundColor), \n        strip.background = element_rect(colour = \"white\", fill = stripColor)) +\n  # change x-axis name\n  scale_x_continuous(name = \"Passing Yards\") +\n  # change y-axis name\n  scale_y_continuous(name = \"Fantasy Points\")\n\n# RB: Ru Yds vs FP (scale Ru TDs)\nplotRB <- ggplot(RB, aes(`Ru_Yds`, `Fantasy_Points`)) +\n  geom_point(aes(col=RB$`Ru_TDs`)) +\n  scale_color_gradientn(colors=c(\"blue\", \"light blue\", \"green\", \"gold\", \"orange\", \"red\")) +\n  guides(color=guide_legend(title=\"Rushing TDs\")) +\n  facet_wrap(~Year) +\n  ggtitle(\"RB Rushing Yards vs Fantasy Points\") +\n  theme(plot.title = element_text(size=30, hjust = 0.5), \n        panel.background = element_rect(fill = 'black', colour = 'white'), \n        plot.background = element_rect(fill=plotBackgroundColor), \n        strip.background = element_rect(colour = \"white\", fill = stripColor)) +\n  scale_x_continuous(name = \"Rushing Yards\") +\n  scale_y_continuous(name = \"Fantasy Points\")\n\n# WR: \nplotWR <- ggplot(WR, aes(YDS, `Fantasy_Points`)) +\n  geom_point(aes(col=WR$TD)) +\n  scale_color_gradientn(colors=c(\"blue\", \"light blue\", \"green\", \"gold\", \"orange\", \"red\")) +\n  guides(color=guide_legend(title=\"Receiving TDs\")) +\n  facet_wrap(~Year) +\n  ggtitle(\"WR Receiving Yards vs Fantasy Points\") +\n  theme(plot.title = element_text(size=30, hjust = 0.5), \n        panel.background = element_rect(fill = 'black', colour = 'white'), \n        plot.background = element_rect(fill=plotBackgroundColor), \n        strip.background = element_rect(colour = \"white\", fill = stripColor)) +\n  scale_x_continuous(name = \"Receiving Yards\") +\n  scale_y_continuous(name = \"Fantasy Points\")\n\n\n# TE: \nplotTE <- ggplot(TE, aes(YDS, `Fantasy_Points`)) +\n  geom_point(aes(col=TE$TD)) +\n  scale_color_gradientn(colors=c(\"blue\", \"light blue\", \"green\", \"gold\", \"orange\", \"red\")) +\n  guides(color=guide_legend(title=\"Receiving TDs\")) +\n  facet_wrap(~Year) +\n  ggtitle(\"TE Receiving Yards vs Fantasy Points\") +\n  theme(plot.title = element_text(size=30, hjust = 0.5), \n        panel.background = element_rect(fill = 'black', colour = 'white'), \n        plot.background = element_rect(fill=plotBackgroundColor), \n        strip.background = element_rect(colour = \"white\", fill = stripColor)) +\n  scale_x_continuous(name = \"Receiving Yards\") +\n  scale_y_continuous(name = \"Fantasy Points\")\n\n\n# Actually Plot\n\nplotMean\nplotQB\nplotRB\nplotWR\nplotTE\n\n\n####################################################################################################################\n###############################################                  ###################################################\n###############################################  End of Project  ###################################################\n###############################################                  ###################################################\n####################################################################################################################\n\n# Create condensed tables\n  QB.condensed <- QB[, c(5, 6, 8, 11, 12, 16, 17, 21)]\n  QB.condensed <- QB.condensed[c(3:5,1:2, 7:8, 6)]\n  \n  RB.condensed <- RB[, c(5:7, 10, 14:18)]\n  RB.condensed <- RB.condensed[c(2, 4, 1, 3, 7, 9, 5, 6, 8)]\n  \n  WR.condensed <- WR[, c(5:9, 14)]\n  WR.condensed <- WR.condensed[c(3, 5, 1, 2, 4, 6)]\n  \n  TE.condensed <- TE[, c(5:9, 14)]\n  TE.condensed <- TE.condensed[c(3, 5, 1, 2, 4, 6)]\n\n# Export data tables to csv files\n  write.csv(QB, file=\"QB.csv\")\n  write.csv(RB, file=\"RB.csv\")\n  write.csv(WR, file=\"WR.csv\")\n  write.csv(TE, file=\"TE.csv\")\n  \n  write.csv(QB.condensed, file=\"QB_condensed.csv\")\n  write.csv(RB.condensed, file=\"RB_condensed.csv\")\n  write.csv(WR.condensed, file=\"WR_condensed.csv\")\n  write.csv(TE.condensed, file=\"TE_condensed.csv\")\n  \n##########################################################################################\n########################################### My Stuff #####################################\n##########################################################################################\n\n# Create tables to export (add the previous year fantasy points)\n  # QB\nQB.2017 <- oneYearTable(QB, 2017)\nQB.2016 <- oneYearTable(QB, 2016)\ntemp <- QB.2016[c(2, 25)]\ncolnames(temp)[c(2)] <- c(\"2016 Fantasy Points\")\nQB.export <- merge(x=QB.2017, y=temp, by.x = c(\"PLAYER\"), by.y = c(\"PLAYER\"), all.x=TRUE)\n  # RB\nRB.2017 <- oneYearTable(RB, 2017)\nRB.2016 <- oneYearTable(RB, 2016)\ntemp <- RB.2016[c(2, 25)]\ncolnames(temp)[c(2)] <- c(\"2016 Fantasy Points\")\nRB.export <- merge(x=RB.2017, y=temp, by.x = c(\"PLAYER\"), by.y = c(\"PLAYER\"), all.x=TRUE)\n  # WR\nWR.2017 <- oneYearTable(WR, 2017)\nWR.2016 <- oneYearTable(WR, 2016)\ntemp <- WR.2016[c(2, 16)]\ncolnames(temp)[c(2)] <- c(\"2016 Fantasy Points\")\nWR.export <- merge(x=WR.2017, y=temp, by.x = c(\"PLAYER\"), by.y = c(\"PLAYER\"), all.x=TRUE)\n  # TE\nTE.2017 <- oneYearTable(TE, 2017)\nTE.2016 <- oneYearTable(TE, 2016)\ntemp <- TE.2016[c(2, 16)]\ncolnames(temp)[c(2)] <- c(\"2016 Fantasy Points\")\nTE.export <- merge(x=TE.2017, y=temp, by.x = c(\"PLAYER\"), by.y = c(\"PLAYER\"), all.x=TRUE)\n\n# create an excel file with just this year's stats\nwrite.xlsx(QB.export, file = \"2017 Stats.xlsx\", sheetName = \"QB\", row.names = FALSE)\nwrite.xlsx(RB.export, file = \"2017 Stats.xlsx\", sheetName = \"RB\", append=TRUE, row.names = FALSE)\nwrite.xlsx(WR.export, file = \"2017 Stats.xlsx\", sheetName = \"WR\", append=TRUE, row.names = FALSE)\nwrite.xlsx(TE.export, file = \"2017 Stats.xlsx\", sheetName = \"TE\", append=TRUE, row.names = FALSE)\n\n\n  \n  \n  \n",
    "created" : 1531515845678.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3656544853",
    "id" : "E05DE27A",
    "lastKnownWriteTime" : 1531520433,
    "last_content_update" : 1531520433767,
    "path" : "C:/Users/John/OneDrive/School/St Thomas/_2018 Spring/Data Visualization/FantasyFootball/WebScrapping2.R",
    "project_path" : "WebScrapping2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}